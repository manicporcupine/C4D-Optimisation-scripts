# Author: Chat GPT and Dani Zaitcev
# Tested with Cinema 4D 2025.2

import c4d
from c4d import gui

def Log(msg):
    """Simple logger to Python console."""
    print(msg)

def find_instances(root, result):
    """Recursively gather all Instance objects under root."""
    if not root:
        return
    if root.GetType() == c4d.Oinstance:
        result.append(root)
    child = root.GetDown()
    while child:
        find_instances(child, result)
        child = child.GetNext()

def get_original_master(inst):
    """Follow the INSTANCEOBJECT_LINK chain to the true master."""
    if inst.GetType() != c4d.Oinstance:
        return None
    visited = set()
    master = inst[c4d.INSTANCEOBJECT_LINK]
    # guard for invalid links
    if not isinstance(master, c4d.BaseObject):
        return None
    while master and master.GetType() == c4d.Oinstance and master not in visited:
        visited.add(master)
        nxt = master[c4d.INSTANCEOBJECT_LINK]
        if not isinstance(nxt, c4d.BaseObject) or nxt == master:
            break
        master = nxt
    return master

def deselect_all(doc):
    """Clear selection on all objects."""
    def recurse(op):
        while op:
            op.DelBit(c4d.BIT_ACTIVE)
            recurse(op.GetDown())
            op = op.GetNext()
    recurse(doc.GetFirstObject())

def get_top_level(objs):
    """Filter out objects whose ancestor is also in the list."""
    top = []
    for o in objs:
        par = o.GetUp()
        skip = False
        while par:
            if par in objs:
                skip = True
                break
            par = par.GetUp()
        if not skip:
            top.append(o)
    return top

class StatsDialog(gui.GeDialog):
    ID_OK = 1000
    def __init__(self, copied, relinked, swapped):
        super().__init__()
        self.copied, self.relinked, self.swapped = copied, relinked, swapped

    def CreateLayout(self):
        self.SetTitle("Smart Copy Tool – Stats")
        self.AddStaticText(1001, c4d.BFH_LEFT, name=f"Objects copied: {self.copied}")
        self.AddStaticText(1002, c4d.BFH_LEFT, name=f"Instance chains removed: {self.relinked}")
        self.AddStaticText(1003, c4d.BFH_LEFT, name=f"Masters swapped: {self.swapped}")
        self.AddButton(self.ID_OK, c4d.BFH_CENTER, name="OK")
        return True

    def Command(self, id, msg):
        if id == self.ID_OK:
            self.Close()
        return True

def main():
    doc = c4d.documents.GetActiveDocument()
    if not doc:
        return

    # 1) Relink all instances to their true masters
    all_insts = []
    find_instances(doc.GetFirstObject(), all_insts)
    relink_count = 0
    if all_insts:
        doc.StartUndo()
        for inst in all_insts:
            master = get_original_master(inst)
            if master:
                current = inst[c4d.INSTANCEOBJECT_LINK]
                if current != master:
                    doc.AddUndo(c4d.UNDOTYPE_CHANGE, inst)
                    inst[c4d.INSTANCEOBJECT_LINK] = master
                    relink_count += 1
        doc.EndUndo()
        c4d.EventAdd()

    # 2) Get selection and top-level roots
    original = list(doc.GetSelection())
    top_roots = get_top_level(original)
    Log(f"Original selection: {[o.GetName() for o in original]}")
    Log(f"Top-level roots: {[o.GetName() for o in top_roots]}")

    # 3) Gather all selected instances, including nested under non-instance roots
    selected_insts = []
    for root in original:
        if root.GetType() == c4d.Oinstance:
            selected_insts.append(root)
        tmp = []
        find_instances(root, tmp)
        selected_insts.extend(tmp)
    # unique
    selected_insts = list(dict.fromkeys(selected_insts))
    Log(f"Selected instances: {[o.GetName() for o in selected_insts]}")

    # 4) Find Alekseis: instances under each master, deeper than first level
    alekseis = []
    for inst in selected_insts:
        master = get_original_master(inst)
        if not master:
            continue
        tmp = []
        find_instances(master, tmp)
        for desc in tmp:
            # exclude direct first-level insts of this master
            if desc.GetType() == c4d.Oinstance and desc[c4d.INSTANCEOBJECT_LINK] != master:
                alekseis.append(desc)
    # unique
    alekseis = list(dict.fromkeys(alekseis))
    Log(f"Алексеев найдено: {[o.GetName() for o in alekseis]}")

    # 5) Smart Copy flow → prepare swap_info
    doc.StartUndo()
    # 5.1) Group top_roots under TempGroup
    crutch = c4d.BaseObject(c4d.Onull); crutch.SetName("TempGroup")
    doc.AddUndo(c4d.UNDOTYPE_NEW, crutch)
    mg_map = {o: o.GetMg() for o in top_roots}
    if top_roots:
        first = top_roots[0]; parent = first.GetUp()
        doc.InsertObject(crutch, parent=parent, pred=first)
        for o in top_roots:
            doc.AddUndo(c4d.UNDOTYPE_CHANGE, o)
            o.InsertUnder(crutch); o.SetMg(mg_map[o])

    # 5.2) Create intermediate groups for instances with children
    under = []; find_instances(crutch, under)
    for inst in under:
        if not inst.GetDown(): continue
        mg = inst.GetMg(); kids = []
        ch = inst.GetDown()
        while ch:
            kids.append(ch); ch = ch.GetNext()
        grp = c4d.BaseObject(c4d.Onull); grp.SetName(f"Group_{inst.GetName()}")
        doc.AddUndo(c4d.UNDOTYPE_NEW, grp)
        par = inst.GetUp(); doc.InsertObject(grp, parent=par, pred=inst)
        grp.SetMg(mg)
        doc.AddUndo(c4d.UNDOTYPE_CHANGE, inst)
        inst.InsertUnder(grp); inst.SetMg(mg)
        for ch in kids:
            doc.AddUndo(c4d.UNDOTYPE_CHANGE, ch)
            ch.InsertUnder(grp); ch.SetMg(ch.GetMg())

    # 5.3) Prepare swap_info for all under TempGroup
    swap_info = []
    under = []; find_instances(crutch, under)
    for inst in under:
        par = inst.GetUp(); idx = 0
        sib = par.GetDown() if par else doc.GetFirstObject()
        while sib and sib is not inst:
            idx += 1; sib = sib.GetNext()
        swap_info.append((inst, par, idx, inst.GetMg()))

    # 5.4) Add Alekseis to swap_info
    for inst in alekseis:
        par = inst.GetUp(); idx = 0
        sib = par.GetDown() if par else doc.GetFirstObject()
        while sib and sib is not inst:
            idx += 1; sib = sib.GetNext()
        swap_info.append((inst, par, idx, inst.GetMg()))

    Log(f"Алексеев свапнуто: {[o.GetName() for o in alekseis]}")
    swap_count = len(swap_info)

    # 5.5) Perform swaps
    for inst, par, idx, mg in swap_info:
        c4d.CallButton(inst, c4d.INSTANCEOBJECT_SWAP)
        new_obj = par.GetDown() if par else doc.GetFirstObject()
        for _ in range(idx):
            if new_obj: new_obj = new_obj.GetNext()
        if new_obj: new_obj.SetMg(mg)

    doc.EndUndo()

    # 6) Copy TempGroup children
    copy_targets = []
    ch = crutch.GetDown()
    while ch:
        copy_targets.append(ch); ch = ch.GetNext()
    copied_count = len(copy_targets)

    deselect_all(doc)
    for o in copy_targets: o.SetBit(c4d.BIT_ACTIVE)
    c4d.CallCommand(100004820)

    # 7) Undo helpers & restore selection
    c4d.CallCommand(12105)
    deselect_all(doc)
    for o in top_roots: o.SetBit(c4d.BIT_ACTIVE)
    c4d.EventAdd()

    # 8) Show stats
    dlg = StatsDialog(copied_count, relink_count, swap_count)
    dlg.Open(c4d.DLG_TYPE_MODAL, defaultw=300, defaulth=100)

if __name__ == '__main__':
    main()
